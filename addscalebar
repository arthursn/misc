#!/usr/bin/python3

if __name__ == '__main__':
    import argparse
    import os
    import numpy as np

    import matplotlib.pyplot as plt
    from matplotlib.font_manager import FontProperties

    from PIL import Image
    from matplotlib_scalebar.scalebar import ScaleBar

    font0 = FontProperties()
    font0.set_size(13)
    font0.set_family('sans-serif')
    font0.set_file('/usr/share/fonts/truetype/msttcorefonts/Arial.ttf')

    parser = argparse.ArgumentParser()
    parser.add_argument('files', nargs='*')
    parser.add_argument('-p', '--pxsize', required=True)
    parser.add_argument('-g', '--gray', action='store_true')
    parser.add_argument('-e', '--ext', default='pdf')
    parser.add_argument('-c', '--crop', type=float, nargs=4)
    parser.add_argument('-d', '--dpi', type=float, default=300)
    parser.add_argument('-r', '--resize', type=float, default=1)
    parser.add_argument('-s', '--suffix', default='')
    args = parser.parse_args()

    try:
        pxsize = float(eval(args.pxsize))
    except:
        raise

    for fname in args.files:
        if os.path.isfile(fname) is True:
            dirbasename = os.path.splitext(fname)[0]
            basename = os.path.basename(dirbasename)

            fout = '{}{}.{}'.format(dirbasename,
                                    args.suffix,
                                    args.ext.strip('.'))

            print(fname + ' > ' + fout)

            img = Image.open(fname)
            # convert to grayscale
            if args.gray:
                img = img.convert('LA')
            # crop
            if args.crop is not None:
                img = img.crop(box=args.crop)
            # resize
            if args.resize != 1:
                newsize = (int(args.resize*img.width),
                           int(args.resize*img.height))
                img = img.resize(size=newsize)

            fig = plt.figure()
            fig.set_size_inches(img.width/args.dpi,
                                img.height/args.dpi, forward=False)
            ax = plt.Axes(fig, [0., 0., 1., 1.])
            ax.set_axis_off()
            fig.add_axes(ax)

            ax.imshow(img)

            scalebar = ScaleBar(pxsize*1e-6/args.resize,
                                location='lower right')
            scalebar.font_properties = font0
            ax.add_artist(scalebar)

            # ax.set_axis_off()
            # ax.axes.get_xaxis().set_visible(False)
            # ax.axes.get_yaxis().set_visible(False)
            # ax.set_frame_on(False)

            # fig.savefig(fout, bbox_inches='tight', pad_inches=0)
            fig.savefig(fout, dpi=args.dpi)

            plt.close(fig)
